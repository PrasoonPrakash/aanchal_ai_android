
from flask import Flask, request, jsonify
import os
import ffmpeg
import assemblyai as aai
from config import assemblyai_key
import pickle
import pandas as pd
import numpy as np

app = Flask(__name__)

UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

with open("randomForest.pkl","rb") as f:
    model=pickle.load(f)

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    file_name=file.filename
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    file_path = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(file_path)
    return jsonify({"Is patient at risk of breast cancer?": process_CSV_file(file_path,file_name)}), 200

def process_CSV_file(file_path,file_name):
    #aai.settings.api_key = assemblyai_key
    #audio_url = file_path
    #config = aai.TranscriptionConfig(language_code='hi')
    #transcriber = aai.Transcriber(config=config)
    try:
        data=pd.read_csv(file_path)
        features=data[["Age", "Residence", "Marr_Status", "AgeOfMarr", "Education", "Occupation", "AgeOfMenar", "Meno_cause", "SES", "Past_surgery", "Waist", "Hips", "Physical_activity", "Conception_type", "Abortion_num", "reg_menstruation_history", "non_veg_freq", "sterilisation", "familyHOcancer", "birthType"]]
        features=features.fillna(0)
        all_features=["AGE"	,"RESIDENCE",	"MARITAL STATUS",	"AGE_MARRIAGE",	"MARRIAGE_DURATION",	"EDUCATION",	"OCCUPATION",	"PERCAPITA_INCOME",	"SES",	"FAMILY TYPE",	"RELIGION",	"MENARCHE_AGE",	"REG_MENSTRUATION_History",	"MENSTRUAL_STATUS"	TYPE_MENOPAUSE	CAUSE_MENOPAUSE	AGE_MENOPAUSE	HOT FLUSHES	NO_CHILDREN	CONCEPTION(NATURALLY CONCEIVE/IVF)	BIRTH (VAGINAL/C-SECTION)	AGE_FIRST CHILD BIRTH	BF_DONE	BF_STATUS	BF_DURATION_MONTHS	CONTRACEPTIVE	CONTRACEPTIVE_TYPE	CONTRACEPTIVE_DURATION_MNTHS	STERILISATION (B/L TUBAL LIGATION)	ABORTION	ABORTION_TYPE	ABORTION_NO.	HRT	RTI/STI	FAMILYHO_CANCER	FAMILYHO_MEMBER_TYPE	COMORBIDITY	COMORBIDITY_TYPE	HTN	DM	THYROID DS	COMORBIDITY_TRTMNT	PAST_SURGERY	TOBACCO	TOBACCO_TYPE	ALCOHOL	DIETARY_PREF	NON-VEG_FREQUENCY	FASTING	FASTING_FREQUENCY	FRUITVEGINTAKE_DAILY	FRUITVEGINTAKE_FREQUENCY	FAT_OIL_USE	MUSTARD OIL	FAT_OIL_TYPE	HO_BREASTABNORMALITY	BREASTABNORMALITY_TYPE	BREAST TRAUMA	RADIATION H/O	RADIATION_TYPE	RADIATION_SITE	PHYSICAL ACTIVITY	PHYSICAL ACTIVITY_GRADE	PHYSICAL ACTIVITY_DURATION_MINS	PERFUME/DEO	PERFUME/DEO_FRQ	TALCUM POWDER	TALCUMPOWDER_FRQ	COSMETICS	COMSETICS_FRQ	WEIGHT (IN KGS)	HEIGHT (IN CMS)	BMI	WHO_BMI_CAT	ASIAN_BMI_CAT	WAIST_CMS	HIP_CMS	WHR	ABD_OBESITY	RBS	SBP	DBP	DIAGNOSIS

        #f1=open(f"{file_name}.txt",'x')
        prediction = model.predict(audio_url)
#f1.write(transcript.text)
        return prediction
    except:
        return "an exception occurred"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=6000)


